<.flash_group flash={@flash} />
<head>
  <meta name="google-site-verification" content="O-GQKbbUV2rUhRtOneHoURp-Q-v7lIbcdP6nfdkrlug" />
  <meta charset="utf-8" />
  <title>3DIE.FR - Official Website & Portfolio</title>
  <meta
    name="description"
    content="Welcome to 3DIE.FR, the official website showcasing portfolio, shop, and information. Explore The Age of Data."
  />
  <meta name="keywords" content="3DIE, portfolio, shop, art, digital art, The Age of Data" />
  <meta
    name="viewport"
    content="width=device-width, initial-scale=1.0, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0"
  />
  <link
    rel="canonical"
    href="https://jorikchase.github.io/images/sites/iori/"
    <meta
    property="og:title"
    content="3DIE.FR - Official Website & Portfolio"
  />
  <meta
    property="og:description"
    content="Explore the portfolio, shop, and information on 3DIE.FR."
  />
  <meta property="og:type" content="website" />
  <meta property="og:url" content="https://jorikchase.github.io/images/sites/iori/" />
  <meta
    property="og:image"
    content="https://jorikchase.github.io/images/sites/iori/assets/icon.ico"
  />
  <meta property="og:image:width" content="630" />
  <meta property="og:image:height" content="630" />

  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content="3DIE.FR - Official Website & Portfolio" />
  <meta
    name="twitter:description"
    content="Explore the portfolio, shop, and information on 3DIE.FR."
  />
  <meta name="twitter:image" content="https://3die.fr/images/sites/iori/assets/preview-image.jpg" />

  <link rel="icon" type="image/x-icon" href="/images/sites/iori/3die.ico" />
  <link type="text/css" rel="stylesheet" href="/images/sites/iori/assets/main.css" />

  <style>
    body {
        touch-action: none;
    }
  </style>
</head>

<!-- Import maps polyfill -->
        <!-- Remove this when import maps will be widely supported -->
<script async src="https://unpkg.com/es-module-shims@1.3.6/dist/es-module-shims.js">
</script>

<script type="importmap">
  {
      "imports": {
          "three": "https://threejs.org/build/three.module.js",
          "three/addons/": "https://threejs.org/examples/jsm/"
      }
  }
</script>

<script type="module">
  import * as THREE from "three";

  import { RGBELoader } from "three/addons/loaders/RGBELoader.js";

  import { GUI } from "three/addons/libs/lil-gui.module.min.js";

  import { EffectComposer } from "three/addons/postprocessing/EffectComposer.js";
  import { RenderPass } from "three/addons/postprocessing/RenderPass.js";
  import { ShaderPass } from "three/addons/postprocessing/ShaderPass.js";
  import { FilmPass } from "three/addons/postprocessing/FilmPass.js";
  import { RGBShiftShader } from "three/addons/shaders/RGBShiftShader.js";
  import { AsciiEffect } from "three/addons/effects/AsciiEffect.js";

  // declarations

  let camera, scene, renderer, composer;
  let cube,
      sphere,
      torus,
      tetrahedron,
      dodecahedron,
      octahedron,
      donut,
      pentahedron,
      sextahedron,
      material,
      effect;

  let cubeCamera, cubeRenderTarget;

  let mouseX = 0,
      mouseY = 0;

  let windowHalfX = window.innerWidth / 2;
  let windowHalfY = window.innerHeight / 2;

  init();

  //init

  function init() {
      //scope

      renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setPixelRatio(window.devicePixelRatio);
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.setAnimationLoop(animation);
      renderer.outputEncoding = THREE.sRGBEncoding;
      renderer.toneMapping = THREE.ACESFilmicToneMapping;
      renderer.toneMappingExposure = 1.3;
      document.body.appendChild(renderer.domElement);

      document.addEventListener("mousemove", onDocumentMouseMove);

      window.addEventListener("resize", onWindowResized);

      // camera

      camera = new THREE.PerspectiveCamera(
          90,
          window.innerWidth / window.innerHeight,
          1,
          1000,
      );
      camera.position.z = 70;

      scene = new THREE.Scene();
      scene.rotation.y = 0.5; // avoid flying objects occluding the sun

      // hdri

      new RGBELoader()
          .setPath("/images/sites/iori/assets/")
          .load("3dieMainBckg.hdr", function (texture) {
              texture.mapping =
                  THREE.EquirectangularReflectionMapping;

              scene.background = texture;
              scene.environment = texture;
          });

      // cubeRenderCamera

      cubeRenderTarget = new THREE.WebGLCubeRenderTarget(256);
      cubeRenderTarget.texture.type = THREE.HalfFloatType;

      cubeCamera = new THREE.CubeCamera(1, 1000, cubeRenderTarget);

      // objects

      material = new THREE.MeshStandardMaterial({
          envMap: cubeRenderTarget.texture,
          roughness: 0.05,
          metalness: 1,
      });

      const radius = 7.5;

      sphere = new THREE.Mesh(
          new THREE.IcosahedronGeometry(20, 8),
          material,
      );
      scene.add(sphere);

      const material2 = new THREE.MeshStandardMaterial({
          roughness: 0.05,
          metalness: 0,
      });

      cube = new THREE.Mesh(
          new THREE.BoxGeometry(radius, radius, radius),
          material2,
      );
      scene.add(cube);

      pentahedron = new THREE.Mesh(
          new THREE.TorusGeometry(radius - 3, 3, 15, 20),
          material2,
      );
      scene.add(pentahedron);

      tetrahedron = new THREE.Mesh(
          new THREE.TetrahedronGeometry(radius),
          material2,
      );
      scene.add(tetrahedron);

      dodecahedron = new THREE.Mesh(
          new THREE.DodecahedronGeometry(radius),
          material2,
      );
      scene.add(dodecahedron);

      donut = new THREE.Mesh(
          new THREE.IcosahedronGeometry(radius, 8),
          material2,
      );
      scene.add(donut);

      octahedron = new THREE.Mesh(
          new THREE.OctahedronGeometry(radius),
          material2,
      );
      scene.add(octahedron);

      torus = new THREE.Mesh(
          new THREE.IcosahedronGeometry(radius, 8),
          material2,
      );
      scene.add(torus);

      sextahedron = new THREE.Mesh(
          new THREE.IcosahedronGeometry(radius),
          material2,
      );
      scene.add(sextahedron);

      // postprocessing

      composer = new EffectComposer(renderer);
      composer.addPass(new RenderPass(scene, camera));

      const effect2 = new ShaderPass(RGBShiftShader);
      effect2.uniforms["amount"].value = 0.001;
      composer.addPass(effect2);

      const effect3 = new FilmPass(0.15, 0.025, 50, false);
      // composer.addPass(effect3);

      //

      // effect = new AsciiEffect( renderer, ' .:-+*=%@#^?;', { invert: true } );
      // effect.setSize( window.innerWidth, window.innerHeight );
      // effect.domElement.style.color = "rgba(255, 255, 255, 0.5)";
      // effect.domElement.style.backgroundColor = "rgba(0, 0, 0, 0.8)";

      // Special case: append effect.domElement, instead of renderer.domElement.
      // AsciiEffect creates a custom domElement (a div container) where the ASCII elements are placed.

      // document.body.appendChild( effect.domElement );
  }

  function onWindowResized() {
      windowHalfX = window.innerWidth / 2;
      windowHalfY = window.innerHeight / 2;

      renderer.setSize(window.innerWidth, window.innerHeight);
      composer.setSize(window.innerWidth, window.innerHeight);

      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();

      // effect.setSize( window.innerWidth, window.innerHeight );
  }

  function onDocumentMouseMove(event) {
      mouseX = (event.clientX - windowHalfX) / 2;
      mouseY = (event.clientY - windowHalfY) / 2;
  }

  function animation(msTime) {
      // rotating objects

      const time = msTime / 1000;

      cube.position.x = Math.cos(time) * 30;
      cube.position.y = Math.sin(time) * 30;
      cube.position.z = Math.sin(time) * 30;

      cube.rotation.x += 0.02;
      cube.rotation.y += 0.03;

      torus.position.x = Math.cos(time + 30) * 30;
      torus.position.y = Math.sin(time + 30) * 30;
      torus.position.z = Math.sin(time + 30) * 30;

      torus.rotation.x += 0.02;
      torus.rotation.y += 0.03;

      tetrahedron.position.x = Math.cos(time + 60) * 30;
      tetrahedron.position.y = Math.sin(time + 60) * 30;
      tetrahedron.position.z = Math.sin(time + 60) * 30;

      tetrahedron.rotation.x += 0.02;
      tetrahedron.rotation.y += 0.03;

      dodecahedron.position.x = Math.cos(time + 90) * 30;
      dodecahedron.position.y = Math.sin(time + 90) * 30;
      dodecahedron.position.z = Math.sin(time + 90) * 30;

      dodecahedron.rotation.x += 0.02;
      dodecahedron.rotation.y += 0.03;

      donut.position.x = Math.sin(time + 15) * 30;
      donut.position.y = Math.cos(time + 15) * 30;
      donut.position.z = Math.sin(time + 15) * 30;

      donut.rotation.x += 0.02;
      donut.rotation.y += 0.03;

      octahedron.position.x = Math.cos(time + 15 + 30) * 30;
      octahedron.position.y = Math.cos(time + 15 + 30) * 30;
      octahedron.position.z = Math.sin(time + 15 + 30) * 30;

      octahedron.rotation.x += 0.02;
      octahedron.rotation.y += 0.03;

      pentahedron.position.x = Math.sin(time + 15 + 60) * 30;
      pentahedron.position.y = Math.cos(time + 15 + 60) * 30;
      pentahedron.position.z = Math.sin(time + 15 + 60) * 30;

      pentahedron.rotation.x += 0.02;
      pentahedron.rotation.y += 0.03;

      sextahedron.position.x = Math.cos(time + 15 + 90) * 30;
      sextahedron.position.y = Math.cos(time + 15 + 90) * 30;
      sextahedron.position.z = Math.sin(time + 15 + 90) * 30;

      sextahedron.rotation.x += 0.02;
      sextahedron.rotation.y += 0.03;

      // fps update

      camera.position.x += (mouseX / 5 - camera.position.x) * 0.01;
      camera.position.y += (-mouseY / 5 - camera.position.y) * 0.02;

      camera.lookAt(scene.position);

      cubeCamera.update(renderer, scene);

      renderer.render(scene, camera);

      // effect.render( scene, camera );

      composer.render();
  }
</script>
<audio autoplay id="backgroundMusic">
  <source src="/images/sites/iori/assets/main-theme.mp3" />
</audio>

<script>
  var audio = document.getElementById("backgroundMusic");
  audio.volume = 0.2;
</script>

<div class="navigation indexNavigation">
  <a href="/images/sites/iori/portfolio.html" class="galleryLink"> portfolio </a>
  <a href="/images/sites/iori/shop.html" class="shopLink"> shop </a>
  <a href="/images/sites/iori/info.html" class="contactLink"> 3die </a>
</div>
<div class="UI">
  <span class="UISubheading"><a href="https://www.theageofdata.net/">The Age of Data</a></span>
  <a
    class="socLink"
    target="_blank"
    href="https://docs.google.com/document/d/1A5NVXLtRMcCPL88n0FjMREgpBHqcZbRa/edit?usp=sharing&ouid=101911821031887759842&rtpof=true&sd=true"
  >
    <img src="/images/sites/iori/assets/textures/socLink.png" />
  </a>
</div>
